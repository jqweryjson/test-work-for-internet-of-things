{"version":3,"sources":["types.ts","utils.ts","components/Form/index.tsx","components/Home/index.tsx","components/Dashboard/index.tsx","components/Nav/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["UI_SCHEMA_TEMPLATE","props","getUiElements","properties","Object","assign","map","property","propertyName","type","propObj","items","set","isNumber","maxItems","value","message","minItems","enum","length","row","getUiSchema","schema","required","Form","React","memo","useState","givenFormData","formData","setFormData","uiSchema","console","log","submitOnEnter","activityIndicatorEnabled","onChange","onSubmit","hasRequired","some","requiredField","has","hasInvalidField","fieldValue","fieldName","validations","size","maxLength","minLength","isValidForm","alert","Home","Container","Dashboard","JSON","stringify","DSL","Nav","role","Breadcrumbs","Link","underline","color","href","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7df11b3d.chunk.js","sourcesContent":["export interface MySchema {\n  streetAddress: string\n  city: string\n  state: string\n  gender?: 'male' | 'female' | 'else'\n  phones?: [string] | [string, string] | [string, string, string]\n  parents?:\n    | []\n    | [\n        {\n          relation?: 'mother' | 'father'\n          age?: number\n          name?: string\n          secondName?: string\n          grandFather?: {\n            [k: string]: unknown\n          }\n          grandMother?: {\n            [k: string]: unknown\n          }\n          [k: string]: unknown\n        }\n      ]\n    | [\n        {\n          relation?: 'mother' | 'father'\n          age?: number\n          name?: string\n          secondName?: string\n          grandFather?: {\n            [k: string]: unknown\n          }\n          grandMother?: {\n            [k: string]: unknown\n          }\n          [k: string]: unknown\n        },\n        {\n          relation?: 'mother' | 'father'\n          age?: number\n          name?: string\n          secondName?: string\n          grandFather?: {\n            [k: string]: unknown\n          }\n          grandMother?: {\n            [k: string]: unknown\n          }\n          [k: string]: unknown\n        }\n      ]\n  [k: string]: unknown\n}\n\nexport const UI_SCHEMA_TEMPLATE = {\n  'ui:page': {\n    props: {\n      'ui:schemaErrors': true,\n    },\n  },\n}\n","import { has, isNumber, map, set, size, some } from 'lodash'\nimport { UI_SCHEMA_TEMPLATE } from './types'\n\nconst getUiElements = (properties: any): any => {\n  return Object.assign(\n    {},\n    UI_SCHEMA_TEMPLATE,\n    ...map(properties, (property: any, propertyName: string) => {\n      switch (property.type) {\n        case 'object':\n          return getUiElements(property.properties)\n\n        case 'array': {\n          const propObj = { [propertyName]: { items: {} } } as any\n\n          set(\n            propObj,\n            `${propertyName}.items`,\n            property.items?.type === 'object'\n              ? getUiElements(property.items.properties)\n              : property.items\n          )\n\n          if (isNumber(property.maxItems)) {\n            set(propObj, `${propertyName}.ui:validations.maxItems`, {\n              value: property.maxItems,\n              message: 'error',\n            })\n          }\n          if (isNumber(property.minItems)) {\n            set(propObj, `${propertyName}.ui:validations.minItems`, {\n              value: property.minItems,\n              message: 'error',\n            })\n          }\n          return propObj\n        }\n\n        case 'string': {\n          if (property.enum?.length)\n            return {\n              [propertyName]: {\n                'ui:widget': 'radio',\n                'ui:options': {\n                  row: true,\n                },\n              },\n            }\n          return { [propertyName]: { 'ui:widget': 'input' } }\n        }\n\n        case 'integer':\n          return { [propertyName]: { 'ui:widget': 'updown' } }\n\n        default:\n          return {}\n      }\n    })\n  )\n}\n\nexport const getUiSchema = (schema: any) => {\n  return { ...getUiElements(schema.properties), required: schema.required }\n}\n\nexport const isValidForm = (value: any) => {\n  const hasRequired = some(value.uiSchema.required, (requiredField: string) =>\n    has(value.formData, requiredField)\n  )\n  const hasInvalidField = some(\n    value.formData,\n    (fieldValue: string, fieldName: any) => {\n      const validations = value.uiSchema?.[fieldName]?.['ui:validations']\n      if (validations) {\n        if (validations.maxItems) {\n          if (size(fieldValue) > validations.maxItems.value) return true\n        }\n        if (validations.minItems) {\n          if (size(fieldValue) < validations.minItems.value) return true\n        }\n        if (validations.maxLength) {\n          if (size(fieldValue) > validations.maxLength.value) return true\n        }\n        if (validations.minLength) {\n          if (size(fieldValue) < validations.minLength.value) return true\n        }\n      }\n      return\n    }\n  )\n\n  return hasRequired && !hasInvalidField\n}\n","/* eslint-disable no-console */\n/* eslint-disable no-shadow */\nimport type { FC } from 'react'\n\nimport React from 'react'\nimport MaterialJsonSchemaForm from 'react-jsonschema-form-material-ui'\n\nimport givenFormData from '../../givenFormData.json'\n\nimport { MySchema } from '../../types'\nimport { getUiSchema, isValidForm } from '../../utils'\n\ninterface Props {\n  schema: MySchema | any\n}\n\nexport const Form: FC<Props> = React.memo(({ schema }) => {\n  const [formData, setFormData] = React.useState(givenFormData)\n  const uiSchema = getUiSchema(schema)\n  console.log(uiSchema)\n\n  const onSubmit = (value: any) => {\n    if (isValidForm(value)) {\n      alert('it`s okay')\n    } else alert('not ok')\n  }\n\n  return (\n    <MaterialJsonSchemaForm\n      submitOnEnter\n      activityIndicatorEnabled\n      schema={schema}\n      uiSchema={uiSchema}\n      formData={formData}\n      onChange={({ formData }: any) => {\n        console.log(formData)\n        setFormData(formData)\n      }}\n      // eslint-disable-next-line no-alert\n      onSubmit={onSubmit}\n    />\n  )\n})\n","import { Container } from '@mui/material'\nimport * as React from 'react'\nimport { Form } from '../Form'\n\nimport schema from '../../schema.json'\n\nconst Home: React.FC = () => {\n  return (\n    <Container>\n      <Form schema={schema} />\n    </Container>\n  )\n}\n\nexport { Home }\n","import type { FC } from 'react'\n\nimport React from 'react'\nimport DSL from '../../DSL.json'\n\ninterface Props {}\n\nexport const Dashboard: FC<Props> = React.memo(() => {\n  return <pre>{JSON.stringify(DSL, null, 2)}</pre>\n})\n","import * as React from 'react'\nimport Breadcrumbs from '@mui/material/Breadcrumbs'\nimport Link from '@mui/material/Link'\n\nexport const Nav = () => {\n  return (\n    <div role=\"presentation\">\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link underline=\"hover\" color=\"inherit\" href=\"/\">\n          Form\n        </Link>\n        <Link underline=\"hover\" color=\"inherit\" href=\"/dashboard\">\n          Dashboard\n        </Link>\n      </Breadcrumbs>\n    </div>\n  )\n}\n","import type { FC } from 'react'\n\nimport * as React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { Home } from './components/Home'\nimport { Dashboard } from './components/Dashboard'\nimport { Nav } from './components/Nav'\n\nconst App: FC = () => {\n  return (\n    <>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/test-work-for-internet-of-things\">\n          <Home />\n        </Route>\n        <Route exact path=\"/test-work-for-internet-of-things/#/dashboard\">\n          <Dashboard />\n        </Route>\n      </Switch>\n    </>\n  )\n}\n\nexport { App }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\n\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}